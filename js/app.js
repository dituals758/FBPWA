// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Flappy Bird PWA
import { GameEngine } from './game/engine.js';
import { PWAInstaller } from './pwa/install.js';
import { OfflineManager } from './pwa/offline.js';
import { Storage } from './utils/storage.js';
import { Helpers } from './utils/helpers.js';

class FlappyBirdApp {
    constructor() {
        this.gameEngine = null;
        this.pwaInstaller = null;
        this.offlineManager = null;
        this.storage = null;
        this.isInitialized = false;
        
        this.init();
    }
    
    async init() {
        try {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showLoadingIndicator();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Ç–∏–ª–∏—Ç—ã
            this.storage = new Storage();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PWA —Ñ—É–Ω–∫—Ü–∏–∏
            this.pwaInstaller = new PWAInstaller();
            await this.pwaInstaller.init();
            
            this.offlineManager = new OfflineManager();
            this.offlineManager.init();
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Service Worker
            await this.registerServiceWorker();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É
            await this.initGame();
            
            // –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.hideLoadingIndicator();
            
            this.isInitialized = true;
            console.log('üéÆ Flappy Bird PWA —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
            this.trackAppLaunch();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }
    }
    
    async initGame() {
        return new Promise((resolve) => {
            // –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => {
                    this.setupGame();
                    resolve();
                });
            } else {
                this.setupGame();
                resolve();
            }
        });
    }
    
    setupGame() {
        try {
            const canvas = document.getElementById('game-canvas');
            
            if (!canvas) {
                throw new Error('Canvas —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä canvas –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            this.optimizeCanvasSize(canvas);
            
            this.gameEngine = new GameEngine(canvas);
            this.setupEventListeners();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã:', error);
            throw error;
        }
    }
    
    optimizeCanvasSize(canvas) {
        const container = canvas.parentElement;
        const rect = container.getBoundingClientRect();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas based on container
        const dpr = window.devicePixelRatio || 1;
        canvas.width = rect.width * dpr;
        canvas.height = rect.height * dpr;
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è HiDPI displays
        const ctx = canvas.getContext('2d');
        ctx.scale(dpr, dpr);
        
        console.log(`üìê Canvas –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω: ${canvas.width}√ó${canvas.height} (DPR: ${dpr})`);
    }
    
    setupEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                if (this.gameEngine && this.gameEngine.canvas) {
                    this.optimizeCanvasSize(this.gameEngine.canvas);
                }
            }, 250);
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–∞—É–∑—ã
        document.addEventListener('visibilitychange', () => {
            if (this.gameEngine) {
                if (document.hidden) {
                    this.gameEngine.pause();
                } else if (this.gameEngine.isRunning) {
                    this.gameEngine.resume();
                }
            }
        });
        
        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∂–µ—Å—Ç–æ–≤
        document.addEventListener('touchmove', (e) => {
            if (e.scale !== 1) {
                e.preventDefault();
            }
        }, { passive: false });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        window.addEventListener('error', (event) => {
            console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', event.error);
            this.trackError(event.error);
        });
        
        window.addEventListener('unhandledrejection', (event) => {
            console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π Promise rejection:', event.reason);
            this.trackError(event.reason);
        });
    }
    
    async registerServiceWorker() {
        if (!('serviceWorker' in navigator)) {
            console.warn('‚ö†Ô∏è Service Worker –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            return;
        }
        
        try {
            const registration = await navigator.serviceWorker.register('./sw.js', {
                scope: '/',
                updateViaCache: 'none'
            });
            
            console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            registration.addEventListener('updatefound', () => {
                const newWorker = registration.installing;
                console.log('üîÑ –ù–∞–π–¥–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ Service Worker');
                
                newWorker.addEventListener('statechange', () => {
                    if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {
                        this.showUpdateNotification();
                    }
                });
            });
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            setInterval(() => {
                registration.update();
            }, 60 * 60 * 1000); // –ö–∞–∂–¥—ã–π —á–∞—Å
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error);
            throw error;
        }
    }
    
    showUpdateNotification() {
        if (Helpers.isMobile() && this.gameEngine && !this.gameEngine.isRunning) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö –∏ –∫–æ–≥–¥–∞ –∏–≥—Ä–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞
            if (confirm('–î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∏–≥—Ä—ã! –û–±–Ω–æ–≤–∏—Ç—å?')) {
                window.location.reload();
            }
        }
    }
    
    showLoadingIndicator() {
        const loading = document.getElementById('loading');
        if (loading) {
            loading.classList.remove('hidden');
        }
    }
    
    hideLoadingIndicator() {
        const loading = document.getElementById('loading');
        if (loading) {
            loading.classList.add('hidden');
            
            // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (loading.parentNode) {
                    loading.parentNode.removeChild(loading);
                }
            }, 500);
        }
    }
    
    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            background: #f44336;
            color: white;
            padding: 1rem;
            text-align: center;
            z-index: 10000;
            font-weight: bold;
        `;
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        
        setTimeout(() => {
            if (errorDiv.parentNode) {
                errorDiv.parentNode.removeChild(errorDiv);
            }
        }, 5000);
    }
    
    trackAppLaunch() {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        const launchData = {
            timestamp: Date.now(),
            userAgent: navigator.userAgent,
            viewport: `${window.innerWidth}x${window.innerHeight}`,
            dpr: window.devicePixelRatio,
            online: navigator.onLine,
            pwa: window.matchMedia('(display-mode: standalone)').matches
        };
        
        console.log('üìä –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', launchData);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å analytics service
        if (typeof gtag !== 'undefined') {
            gtag('event', 'app_launch', launchData);
        }
    }
    
    trackError(error) {
        const errorData = {
            name: error.name,
            message: error.message,
            stack: error.stack,
            timestamp: Date.now(),
            url: window.location.href
        };
        
        console.error('üìä –û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', errorData);
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—à–∏–±–∫–∏ –≤ —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (typeof gtag !== 'undefined') {
            gtag('event', 'exception', {
                description: error.message,
                fatal: true
            });
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.flappyBirdApp = new FlappyBirdApp();
    });
} else {
    window.flappyBirdApp = new FlappyBirdApp();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { FlappyBirdApp };
} else {
    window.FlappyBirdApp = FlappyBirdApp;
}